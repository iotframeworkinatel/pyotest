
import socket
import base64
import time
import logging

def test_rtsp_open(ip, port=554):
    try:
        sock = socket.create_connection((ip, port), timeout=2)
        request = f"OPTIONS rtsp://{ip}:{port}/ RTSP/1.0\r\nCSeq: 1\r\n\r\n"
        sock.send(request.encode())
        response = sock.recv(1024).decode()
        sock.close()
        return "RTSP/1.0 200 OK" in response
    except Exception as e:
        return False


def rtsp_brute_force(ip, port=554, args=None, wordlist_path="./vulnerability_tester/rtsp-urls.txt", user=None, password=None, timeout=3):
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
    else:
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
   
    valid_paths = []
    auth_header = ""
    
    if user and password:
        creds = f"{user}:{password}"
        auth_header = f"Authorization: Basic {base64.b64encode(creds.encode()).decode()}"

    with open(wordlist_path, "r", encoding="utf-8") as f:
        paths = [line.strip() for line in f if line.strip() and not line.startswith("#")]

    for path in paths:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(timeout)
            sock.connect((ip, port))

            describe_req = (
                f"DESCRIBE rtsp://{ip}{path} RTSP/1.0\r\n"
                f"CSeq: 1\r\n"
                f"{auth_header}\r\n"
                f"Accept: application/sdp\r\n\r\n"
            )

            sock.send(describe_req.encode())
            response = sock.recv(4096).decode(errors="ignore")
            sock.close()

            if "200 OK" in response:
                logging.debug(f"Válido: rtsp://{ip}{path}")
                valid_paths.append(f"rtsp://{ip}{path}")
            elif "401 Unauthorized" in response:
                logging.debug(f"[Protegido: rtsp://{ip}{path}")
            elif "404" in response:
                pass  # caminho não existe
            elif "405" in response:
                logging.debug(f"Método bloqueado (405): {path}")
            else:
                logging.debug(f"Resposta inesperada para {path}: {response[:60]}")
            
            time.sleep(0.1)  # Evita rate-limit em dispositivos sensíveis

        except socket.timeout:
            logging.debug(f"Timeout: {path}")
        except Exception as e:
            logging.error(f"Erro em {path}: {e}")
        finally:
            try:
                sock.close()
            except:
                pass

    return valid_paths
